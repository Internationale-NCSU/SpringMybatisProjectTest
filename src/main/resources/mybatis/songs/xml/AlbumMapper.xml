<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.springmybatisprojecttest.mapper.AlbumMapper">
  <resultMap id="BaseResultMap" type="com.example.springmybatisprojecttest.bean.Album">
    <id column="album_id" jdbcType="INTEGER" property="albumId" />
    <result column="album_name" jdbcType="VARCHAR" property="albumName" />
    <result column="track_number" jdbcType="INTEGER" property="trackNumber" />
    <result column="release_year" jdbcType="VARCHAR" property="releaseYear" />
    <result column="edition" jdbcType="VARCHAR" property="edition" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    album_id, album_name, track_number, release_year, edition
  </sql>
  <select id="selectByExample" parameterType="com.example.springmybatisprojecttest.bean.AlbumExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from Album
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from Album
    where album_id = #{albumId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from Album
    where album_id = #{albumId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.springmybatisprojecttest.bean.AlbumExample">
    delete from Album
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.springmybatisprojecttest.bean.Album">
    <selectKey keyProperty="albumId" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into Album (album_id, album_name, track_number, 
      release_year, edition)
    values (#{albumId,jdbcType=INTEGER}, #{albumName,jdbcType=VARCHAR}, #{trackNumber,jdbcType=INTEGER}, 
      #{releaseYear,jdbcType=VARCHAR}, #{edition,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.springmybatisprojecttest.bean.Album">
    <selectKey keyProperty="albumId" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into Album
    <trim prefix="(" suffix=")" suffixOverrides=",">
      album_id,
      <if test="albumName != null">
        album_name,
      </if>
      <if test="trackNumber != null">
        track_number,
      </if>
      <if test="releaseYear != null">
        release_year,
      </if>
      <if test="edition != null">
        edition,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{albumId,jdbcType=INTEGER},
      <if test="albumName != null">
        #{albumName,jdbcType=VARCHAR},
      </if>
      <if test="trackNumber != null">
        #{trackNumber,jdbcType=INTEGER},
      </if>
      <if test="releaseYear != null">
        #{releaseYear,jdbcType=VARCHAR},
      </if>
      <if test="edition != null">
        #{edition,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.springmybatisprojecttest.bean.AlbumExample" resultType="java.lang.Long">
    select count(*) from Album
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update Album
    <set>
      <if test="record.albumId != null">
        album_id = #{record.albumId,jdbcType=INTEGER},
      </if>
      <if test="record.albumName != null">
        album_name = #{record.albumName,jdbcType=VARCHAR},
      </if>
      <if test="record.trackNumber != null">
        track_number = #{record.trackNumber,jdbcType=INTEGER},
      </if>
      <if test="record.releaseYear != null">
        release_year = #{record.releaseYear,jdbcType=VARCHAR},
      </if>
      <if test="record.edition != null">
        edition = #{record.edition,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update Album
    set album_id = #{record.albumId,jdbcType=INTEGER},
      album_name = #{record.albumName,jdbcType=VARCHAR},
      track_number = #{record.trackNumber,jdbcType=INTEGER},
      release_year = #{record.releaseYear,jdbcType=VARCHAR},
      edition = #{record.edition,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.springmybatisprojecttest.bean.Album">
    update Album
    <set>
      <if test="albumName != null">
        album_name = #{albumName,jdbcType=VARCHAR},
      </if>
      <if test="trackNumber != null">
        track_number = #{trackNumber,jdbcType=INTEGER},
      </if>
      <if test="releaseYear != null">
        release_year = #{releaseYear,jdbcType=VARCHAR},
      </if>
      <if test="edition != null">
        edition = #{edition,jdbcType=VARCHAR},
      </if>
    </set>
    where album_id = #{albumId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.springmybatisprojecttest.bean.Album">
    update Album
    set album_name = #{albumName,jdbcType=VARCHAR},
      track_number = #{trackNumber,jdbcType=INTEGER},
      release_year = #{releaseYear,jdbcType=VARCHAR},
      edition = #{edition,jdbcType=VARCHAR}
    where album_id = #{albumId,jdbcType=INTEGER}
  </update>
</mapper>